<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MainWindow_Clipboard_PasteFailure" xml:space="preserve">
    <value>There was error pasting the formated Text.</value>
    <comment>Shown to the user if Clipboard.gettext() fails to work in ToolKit_FetchClipboard() - the common Get Text from the clipboard routine</comment>
  </data>
  <data name="MainWindow_MessageTitle_SaveChanges" xml:space="preserve">
    <value>"Save Changes?"</value>
    <comment>Typical shown if the mainwindow dialog is asking the user if they wish to save changes to the current file</comment>
  </data>
  <data name="MainWindow_OnShow_ErrorInConfigStateOnLoadMessage" xml:space="preserve">
    <value>Warning: There were some errors in loaded the state. Reverting to default settings this time.</value>
    <comment>Displayed when there where errors in loaded the state (i.e exceptions) and the system reverts to defaults</comment>
  </data>
  <data name="MainWindow_OnShow_FailToLoadConfigStateMessage" xml:space="preserve">
    <value>Warning: State of Application did not load ok. Reverting to default settings this time.</value>
    <comment>Displayed when the saved application state is not loaded ok and the system reverts to defaults</comment>
  </data>
  <data name="MainWindow_PluginMessages_PluginFormatLoadFail" xml:space="preserve">
    <value>Error: Plugin could not load plugins that handle saving / loaded various file types</value>
    <comment>Displayed to the user if there was an error in loaded the format plugins</comment>
  </data>
  <data name="MainWindow_Title_HasContextFormatString" xml:space="preserve">
    <value>{0} -- {1}{2}</value>
    <comment>This is the title of the mainwindow dialog after a file is saved or loaded. {0} resolves to running assembly. {1} resolves to CurrentFile.Location. {2} resolves to '*' if the text in the dialog has changes since last save or load and resolves to string.empty if no change</comment>
  </data>
  <data name="MainWindow_Title_NoContextFormatString" xml:space="preserve">
    <value>{0} -- No Context</value>
    <comment>This is the tile of the mainwindow dialog before a file is saved or loaded. {0} resolves to assembly name</comment>
  </data>
  <data name="NewMenu_PromptChangesText" xml:space="preserve">
    <value>This file may have unsaved changed. Are you sure you wish to start fresh? If so then changes will be lost.</value>
    <comment>Displayed when the user clicks the "New" Menu Item and there are unsaved changes.</comment>
  </data>
  <data name="Shutdown_FailureToSaveConfigMessage" xml:space="preserve">
    <value>Failed to save config file. Settings not preserved</value>
    <comment>Displayed when the main form is closed and Windows it not shutting down when an error happens on saving the config file</comment>
  </data>
</root>